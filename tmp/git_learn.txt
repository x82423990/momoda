# 基本操作
	# 初始化一个仓库：
	git init


	# 往仓库里面添加文件
	git add filename.txt

	# 提交到版本库
	git commit -m 'remark  info'


	# 查看仓库状态

	git status

	# 查看修改内容
	git diff

	# 查看日志 
	git log 
	如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：

# 版本回退
	#回退到上一个版本
	git reset --hard HEAD^
	上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

	# 回退到指定的版本：
	git reset --hard cb926e7ea50ad11b8f

	# 当回退到上个版本的时候 ，git log 最新的commit ID 使用git log将会不再显示。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：

		git reflog
		ea34578 HEAD@{0}: reset: moving to HEAD^
		3628164 HEAD@{1}: commit: append GPL
		ea34578 HEAD@{2}: commit: add distributed
		cb926e7 HEAD@{3}: commit (initial): wrote a readme file


	# 版本回退总结：
			


			HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

			穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

			要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

# 强力理解 工作区，暂存区，和远端 
	# 比较工作区和暂存去文件的差异 
	git diff HEAD -- LICENSE.txt

	# 丢弃工作区的修改（未提交到暂存区）：
	git checkout -- file # 意思就是说修改到最后一次commit的状态

	#  丢弃暂存区的修改
		git reset HEAD LICENSE 
		git checkout -- LICENSE

# 删除文件

	git rm file.name.txt

	git commit -m 'remove file'

	如果删除了也可以轻松恢复
	git checkout -- test.txt

# 远端仓库
	git remote # 查看
	git remote add origin git@github.com:x82423990/momoda.git # 添加
	git remote rm origin # 删除 
	git push origin master # 推送到远端

 	# 使用git 的ssh 之前好像要执行下
		ssh  -T git@github.com
		Hi x82423990! You've successfully authenticated, but GitHub does not provide shell access.

	# 新建远端分支
		git push origin test # 推送本地分支到远端，如果远端没有则会新建
		git checkout -b dev origin/test  把远程的test 分支检出到本地的dev分支

# 分支
	git checkout -b dev # 新建分支
	git bracth # 列出所有分支，当前分支前面会标一个*号。
	git merg dev 合并到master分支（在master分支下执行的）
	git branch -d dev #  删除dev 分支
	git branch -D feature-vulcan #强行删除没有被合并的分支

	小结：
		查看分支：git branch

		创建分支：git branch <name>

		切换分支：git checkout <name>

		创建+切换分支：git checkout -b <name>

		合并某分支到当前分支：git merge <name>

		删除分支：git branch -d <name>

# 合并及冲突解决

	
	git merge feature1 把feature1合并到master分支。
	#解决冲突
		我想努力把合并冲突解释清楚，
		看一个例子：

			git checkout -b test # 新建一个test分支

			# 修改一个文件如LINCE的最后一行加上 I'm is conflict
			git add . # 添加到暂存区

			git commit -m 'add conflict to test'

			git checkout  master # 切换到master
			## 修改一个文件如LINCE的最后一行加上 I'm is conflict master

			git add . # 添加到暂存区

			git commit -m 'add conflict to master'
 			
 			git merge test # 这个时候如果在master分支上合并就会有如下提示：
	 			Auto-merging LICENSE
				CONFLICT (content): Merge conflict in LICENSE
				Automatic merge failed; fix conflicts and then commit the result.
			# 这个时候去修改下， 提示的这个文件就可以了LICENSE。
			# 当下次继续合并的时候已经解决过的冲突不会在重复的提示（这点很重要）

	#查看 解决冲突
	git log --graph --pretty=oneline --abbrev-commit

# 保存现场&恢复现场
	git stash #保存现场
	git stash list # 查看被保护的现场
	git stash apply #恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
	git stash pop # 恢复的同时把stash内容也删了：

# 多人协作
	首先，可以试图用git push origin branch-name推送自己的修改；

	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

	如果合并有冲突，则解决冲突，并在本地提交；

	没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

	如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

	这就是多人协作的工作模式，一旦熟悉了，就非常简单。



# 标签
	
	git tag TAG_NAME #打tag，给现有提交
	git log --pretty=oneline --abbrev-commit # 查看历史commit id
	git tag v0.9 COMMIT_ID  #   给历史提交
	git show <tagname> # 可以看到说明文字：
	git tag -d v0.1 # 删除标签

	总结：
	 		git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

			git tag -a <tagname> -m "blablabla..."可以指定标签信息；

			git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

			命令git tag可以查看所有标签。

			git push origin <tagname>可以推送一个本地标签；

			git push origin --tags可以推送全部未推送过的本地标签；
			git tag -d <tagname>可以删除一个本地标签；
			git push origin :refs/tags/<tagname>可以删除一个远程标签。
# 忽略文件
	把需要忽略的文件写入到.gitignore文件里面

# 别名 & 配置文件
	实例：
		git config --global alias.co checkout
		git config --global alias.ci commit
		git config --global alias.br branch

	配置文件：
		配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。

		配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：

		$ cat .git/config 
		[core]
		    repositoryformatversion = 0
		    filemode = true
		    bare = false
		    logallrefupdates = true
		    ignorecase = true
		    precomposeunicode = true
		[remote "origin"]
		    url = git@github.com:michaelliao/learngit.git
		    fetch = +refs/heads/*:refs/remotes/origin/*
		[branch "master"]
		    remote = origin
		    merge = refs/heads/master
		[alias]
		    last = log -1
		别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

		而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

		$ cat .gitconfig
		[alias]
		    co = checkout
		    ci = commit
		    br = branch
		    st = status
		[user]
		    name = Your Name
   			email = your@email.com


























